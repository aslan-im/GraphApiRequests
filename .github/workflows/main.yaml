name: "Build and deploy"

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v2
      
      - name: Install required PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $Modules = @(
            "Pester", "PSSCriptAnalyzer", "InvokeBuild", "platyPS"
          )
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module $Modules -ErrorAction Stop
      
      - name: Invoke Build
        shell: pwsh
        run: pwsh -command "Invoke-Build -File ./build.ps1 -Configuration 'Release' -ExportAlias"

      - name: Perform a pester tests
        run: |
          Invoke-Pester .\Tests\*.Tests.ps1 -Output Detailed
        shell: pwsh
      
      - name: Push changes to Git Repository
        run: |
          git config --global user.name 'aslan-im'
          git config --global user.email 'skif.white@gmail.com'
          git remote set-url origin https://x-access-token:${{ secrets.TOKEN }}@github.com/${{ github.repository }}
          git add .
          git commit -am "Pushing Artifacts"
          git push

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2.2.3
        with:
          name: module-artifact # Naming the powershell module artifact
          path: ./Output/ # Saving the powershell module artifact to the path ./Output/
  
  # release:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #       # Check out the main branch
  #     - uses: actions/checkout@main
    
  #     - name: Download build artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         # repo: ${{github.repository}}
  #         name: module-artifact # Name of the powershell module artifact
  #         path: Output/ # Downloads the module to the path ./Artifact/

  #     - name: Get Module Name and version
  #       run: |
  #         Write-Host $Env:GITHUB_REF
  #         $ModuleName = (Get-ChildItem -Path ./Output/).Name
  #         $ModuleVersion = (Get-ChildItem -Path ./Output/$ModuleName).Name
  #         echo "MODULE_NAME=$ModuleName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
  #         echo "MODULE_VERSION=$ModuleVersion" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
  #       shell: pwsh
      
  #     # - name: Create release
  #     #   id: create_release
  #     #   uses: actions/create-release@v1
  #     #   env:
  #     #     GITHUB_TOKEN: ${{ secrets.TOKEN }}
  #     #   with:
  #     #     tag_name: ${{ env.VersionToBuild }}
  #     #     release_name: Release ${{ env.VersionToBuild }}
  #     #     body_path: release/releasenotes.txt
  #     #     draft: false
  #     #     prerelease: false

  #     - name: Archive the release
  #       run: |
  #         $compress = @{
  #           Path = @("./Output/$($env:MODULE_NAME)/*/$($env:MODULE_NAME).psm1", 
  #           "/Output/$($env:MODULE_NAME)*/$($env:MODULE_NAME).psd1")
  #           CompressionLevel = "Fastest"
  #           DestinationPath = "./$($env:MODULE_NAME)_$($env:MODULE_VERSION).zip"
  #         }
  #         Compress-Archive @compress
  #         echo "RELEASE_NAME=$($env:MODULE_NAME)_$($env:MODULE_VERSION).zip" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
  #       shell: pwsh

  #     - name: Create release
  #       uses: "marvinpinto/action-automatic-releases@latest"
  #       with:
  #         repo_token: "${{ secrets.TOKEN }}"
  #         automatic_release_tag: "latest"
  #         prerelease: true
  #         title: "Development Build"
  #         files: ./${{ env.RELEASE_NAME }}

  #     # - name: Upload release asset
  #     #   id: Upload_release_asset
  #     #   uses: softprops/action-gh-release@v1
  #     #   env:
  #     #     GITHUB_TOKEN: ${{ secrets.TOKEN }}
  #     #   with:
  #     #     files: ./Output/${{ env.MODULE_NAME }}/*
  #     #     tag_name: ${{ env.VersionToBuild }}
  #         # upload_url: ${{ steps.create_release.outpus.upload_url }}
  #         # asset_path: release/${{ env.GH_PROJECTNAME }}_${{ env.VersionToBuild }}.zip
  #         # asset_name: ${{ env.GH_PROJECTNAME }}_${{ env.VersionToBuild }}.zip
  #         # asset_content_type: application/zip
        
  #     # - name: upload release as artifact
  #     #   uses: actions/upload-artifact@v2
  #     #   with:
  #     #     name: ${{ github.SHA }}
  #     #     path: release/${{ env.GH_PROJECTNAME }}_${{ env.VersionToBuild }}.zip
  


  #     # - name: Publish to Powershell Gallery
  #     #   uses: pcgeek86/publish-powershell-module-action@v20
  #     #   with:
  #     #     modulePath: ./Artifact/${{ env.MODULE_NAME }} # Using the environment variable to find the module name
  #     #     NuGetApiKey: ${{ secrets.PSGALLERY_KEY }} # Using the NugetAPI key set in GitHub Secrets
